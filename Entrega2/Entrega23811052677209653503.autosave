PImage imagenPrincipal;
PImage[] imagenes;

File dir;
File[] archivos;
int x = 0;
int y = 0;
int indicePrincipal = 0;
int imagenGrande = 0;

boolean preparado = false;
boolean derecha = false;
boolean izquierda = false;
boolean automatico = false;

void setup()
{
  selectFolder("Selecciona una imagen:", "imagenSeleccionada");
  background(color(211,211,211));
  size(800, 800);
}

void imagenSeleccionada(File selection)
{

  if (selection == null)
  {
    println("Window was closed or the user hit cancel.");
  }
  else
  {
    println("User selected " + selection.getAbsolutePath());
    // Aquí tendrías que procesar el directorio para hacer con el listado de ficheros
    procesarFicheros(selection.getAbsolutePath());
  }
}

void procesarFicheros(String absolutePath)
{
  dir = new File(dataPath(absolutePath));
  archivos = dir.listFiles();

  int count = 0;
  for (int i = 0; i <= archivos.length - 1; i++)
  {
    String path = archivos[i].getAbsolutePath();
    if (path.toLowerCase().endsWith("jpg"))
      count++;
  }

  imagenes = new PImage[count];

  for (int i = 0; i <= archivos.length - 1; i++)
  {
    String path = archivos[i].getAbsolutePath();
    if (path.toLowerCase().endsWith("jpg"))
    {
      println(path);
      imagenes[i] = loadImage(path);
    }
  }
  preparado = true;
}

void draw()
{
  imageMode(CORNER);

  if (preparado)
  {
    pintar();
    pintarBorde(10);
    showimagenPrincipal();
  }
  if (derecha)
  {
    moverDerecha();
    showimagenPrincipal();
    pintarBorde(10);
    derecha = false;
  }
  if (izquierda)
  {
    moverIzquierda();
    showimagenPrincipal();
    pintarBorde(10);
    izquierda = false;
  }

  if (automatico)
  {
    next();
  }
}

void showimagenPrincipal()
{
  if (indicePrincipal == imagenes.length - 1)
    imagenGrande = 0;
  else
    imagenGrande = indicePrincipal + 1;

  imagenPrincipal = imagenes[imagenGrande];
  image(imagenes[imagenGrande], 800 / 5.8, 600 / 2.5, width / 1.5, height / 2);
}

void pintarBorde(int frameSize)
{
  noFill();
  int colorBorde = color(255, 0, 0);

  strokeWeight(frameSize);
  stroke(colorBorde);
  x = 0;
  rect(800 / 3, 0, width / 3, height / 3);
}

void pintar()
{
  int cont = 0;
  for (int i = indicePrincipal; cont < 3; i++)
  {
    image(imagenes[i], x, y, width / 3, height / 3);
    x = x + width / 3;
    cont++;
  }
  preparado = false;
  x = 0;
}

void moverDerecha()
{
  int cont = 0;
  x = 0;
  for (int i = indicePrincipal; cont < 3; i++)
  {
    if (i > imagenes.length - 1)
    {
      i = 0;
    }
    image(imagenes[i], x, y, width / 3, height / 3);
    x = x + width / 3;
    cont++;
  }
}

void moverIzquierda()
{
  int cont = 0;
  x = 800 - width / 3;
  int aux = -1;

  for (int i = indicePrincipal; cont <= 2; i--)
  {
    if (i < 0)
    {
      i = imagenes.length - 1;
      indicePrincipal = i - 1;
    }
    else if (i == imagenes.length)
    {
      i = 0;
      indicePrincipal = imagenes.length - 1;
    }
    image(imagenes[i], x, y, width / 3, height / 3);
    x = x - width / 3;
    cont++;
    aux = i;
  }
  indicePrincipal = aux;
  preparado = false;
}

void keyPressed()
{

  if (keyCode == RIGHT)
  {
    indicePrincipal++;
    //System.out.println("Indice pasará a la derch: " + indicePrincipal);
    indicePrincipal = (indicePrincipal > imagenes.length - 1) ? 0 : indicePrincipal;
    derecha = true;
  }

  if (keyCode == LEFT)
  {
    indicePrincipal++;
    //System.out.println("Indice pasará a la izq: " + indicePrincipal);
    indicePrincipal = (indicePrincipal - 1 >= 0) ? indicePrincipal : imagenes.length - 1;
    izquierda = true;
  }

  if (key == 'b')
  {

    blueFiltro();
    image(imagenPrincipal, 800 / 5.8, 600 / 2.5, width / 1.5, height / 2);
  }

  if (key == 'n')
  {
    noFiltro();
    image(imagenPrincipal, 800 / 5.8, 600 / 2.5, width / 1.5, height / 2);
  }

  if (key == 'p')
  {

    pinkFiltro();
    image(imagenPrincipal, 800 / 5.8, 600 / 2.5, width / 1.5, height / 2);
  }

  if (key == 'c')
  {
    System.out.println("Modo presentacion activado");
    automatico = true;
  }

  if (key == 's')
  {
    System.out.println("Modo presentacion desactivado");
    automatico = false;
  }
}

void blueFiltro()
{
  tint(0, 153, 204);
}

void noFiltro()
{
  tint(255, 255, 255);
}

void pinkFiltro()
{
  tint(247, 191, 190);
}

void next()
{
  indicePrincipal++;
  indicePrincipal = (indicePrincipal > imagenes.length - 1) ? 0 : indicePrincipal;
  moverDerecha();
  showimagenPrincipal();
  pintarBorde(10);
  derecha = false;
  delay(3000);
}
